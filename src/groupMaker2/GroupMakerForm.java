 /*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GroupMakerForm.java
 *
 * Created on Jan 3, 2012, 7:51:54 PM
 */
package groupMaker2;

import java.io.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import java.awt.*;
public class GroupMakerForm extends javax.swing.JFrame {

    /** Creates new form GroupMakerForm */
    private ArrayList<Student> students;
    private ArrayList<Student> backUp;
    private int numStudents;
    private Random r;
    private File file;
    public GroupMakerForm() {
        initComponents();
        students=new ArrayList<Student>();
        numStudents=0;
        r=new Random();
        backUp=null;
        fileChooser.setVisible(false);
        file=null;
    }
    public void save()
    {
        Collections.sort(students);
            /*File yourFile = new File("People.txt");
            yourFile.delete();
            File yourNewFile = new File("People.txt");*/
            //ta2.setText("");
        /*try {
            yourNewFile.createNewFile();
        } catch (IOException ex) {
            Logger.getLogger(GroupMakerForm.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        //try {
            //FileWriter fw=new FileWriter(new File("People.txt"));
            for(int i=0; i<students.size(); i++)
            {
                /*String line=students.get(i).getName()+"|";
                for(int j=0; j<students.size(); j++)
                {
                    if(i!=j)
                    {
                        line+=students.get(j).getName()+","+students.get(j).getName()+",";
                        //students.get(i).addOKStudent(students.get(j));
                    }
                }*/
                //ta2.append(students.get(i).getNumOK()+students.get(i).toPrintString()+"\n");
                //fw.append(students.get(i).toPrintString()+"\n");
            }
            //fw.close();
        //} catch (IOException ex) {
         //   Logger.getLogger(GroupMaker.class.getName()).log(Level.SEVERE, null, ex);
        //}
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        groups = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        tabs = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextArea = new javax.swing.JTextArea();
        numTimes = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        fileChooser = new javax.swing.JFileChooser();
        jMenuBar1 = new javax.swing.JMenuBar();
        saveMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        groups.setText("Create Groups");
        groups.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                groupsActionPerformed(evt);
            }
        });

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        TextArea.setColumns(20);
        TextArea.setRows(5);
        jScrollPane1.setViewportView(TextArea);

        tabs.addTab("People", jScrollPane1);

        numTimes.setValue(1);

        jLabel1.setText("Amount of Groups:");

        saveMenu.setText("File");

        jMenuItem1.setText("Load");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        saveMenu.add(jMenuItem1);

        jMenuBar1.add(saveMenu);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(9, 9, 9)
                .add(groups)
                .add(18, 18, 18)
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 30, Short.MAX_VALUE)
                .add(numTimes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 98, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(64, 64, 64)
                .add(resetButton))
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(tabs, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 524, Short.MAX_VALUE)
                .add(13, 13, 13))
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(194, Short.MAX_VALUE)
                    .add(fileChooser, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(342, 342, 342)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(0, 10, Short.MAX_VALUE)
                .add(tabs, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 346, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(groups)
                        .add(resetButton)
                        .add(jLabel1))
                    .add(numTimes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .add(2, 2, 2)
                    .add(fileChooser, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(387, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void scramSort()
    {
        Collections.shuffle(students);
        Collections.sort(students);
    }
    private void createGroups()
    {
        // TODO add your handling code here:
        scramSort();
        scramSort();
        //Collections.sort(students);
        int numGroups=numStudents/2;
        Group[] groups=new Group[numGroups];
        for(int i=0;i<numStudents%numGroups; i++)
        {
            groups[i]=new Group(numStudents/numGroups+1);
            //System.out.println(groups[i].getNumInGroup());
        }
        for(int i=numStudents%numGroups; i<numGroups; i++)
        {
            groups[i]=new Group(numStudents/numGroups);
            //System.out.println(groups[i].getNumInGroup());
        }
        
        int curG=0;
        ArrayList<Student> temp= new ArrayList<Student>();
        for(int i=0; i<students.size(); i++)
        {
            temp.add(students.get(i));
        }
        //for(int i=0; i<numStudents; i++)
        while(temp.size()>0&&curG<numGroups)
        {
            Student stu=temp.remove(0);
            groups[curG].addStudent(stu);
            System.out.print(stu.getName()+":");
            int stop=(groups[curG].getNumInGroup()-1);
            Student saved=null;
            for(int n=0;n<stop;n++)
            {
                Student stu2=stu.pickStudent(n, temp);
                if(n==1)
                {
                    stu2=stu.pickStudent(n, temp,saved.getAllOK());
                }
                
                
                
                if(stu2!=null)
                {
                    System.out.print(stu2.getName());
                    groups[curG].addStudent(stu2);
                    saved=stu2;
                    temp.remove(stu2);
                    //System.out.println("1:"+curG);
                }
                /*else if(curG<11)
                {
                    temp.add(stu);
                    groups[curG].undo();
                    //if(!temp.isEmpty())
                        //temp.get(0).shuffle();
                    //Collections.shuffle(temp);
                    //Collections.sort(temp);
                    System.out.println("2:"+curG);
                }*/
                else
                {
                    System.out.println("Fail");
                    for(int a=0; a<groups.length; a++)
                    {
                        groups[a].undo();
                    }
                    temp= new ArrayList<Student>();
                    for(int i=0; i<students.size(); i++)
                    {
                        students.get(i).shuffle();
                        temp.add(students.get(i));
                        
                    }
                    curG=-1;
                    scramSort();
                    n=stop+1;
                    /*scramSort();
                    temp=students;
                    curG=-1;
                    System.out.println("3");*/
                    //return;
                    
                }
                
                
            }
            curG++;
            System.out.println();
            
            
            
            /*for(int x=0; x<groups.length; x++)
            {
                if(groups[x].addStudent(students.get(i))==true)
                {
                    x=groups.length;

                }
                else if(x==groups.length-1)
                {
                    //System.out.println("AAAHH");
                    for(int a=0; a<groups.length; a++)
                    {
                        groups[a].undo();
                    }
                    i=-1;
                    //Collections.shuffle(students);
                    scramSort();
                    //Collections.sort(students);
                }
            }*/
        }
        System.out.println();System.out.println();
            

        

        //System.out.println("test");

        //print groups
        //tabs=new JTabbedPane();
        
        for(int i=0; i<numGroups; i++)
        {
            groups[i].confirm();
            
        }
        String print="";
        //Component c=TextArea;
        
        
        //TextArea.setText(print);
        //backUp=students;
        save();
    }
    private void groupsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_groupsActionPerformed
        int x=(new Integer(numTimes.getValue()+"")-students.get(0).getNumGroups());
        for(int i=0; i<x; i++)
        {
            createGroups();
        }
        tabs.removeAll();
        ArrayList<JTextArea> ta=new ArrayList<JTextArea>();
        for(int i=0; i<students.size(); i++)
        {
            ta.add(new JTextArea());
            tabs.addTab(students.get(i).getName(), ta.get(ta.size()-1));
            ta.get(ta.size()-1).setText(students.get(i).groupsString());
        }
        
    }//GEN-LAST:event_groupsActionPerformed

    private void load()
    {
        fileChooser.setVisible(true);
        int returnVal = fileChooser.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
        file = fileChooser.getSelectedFile();
        
    } else {
        System.out.println("File access cancelled by user.");
    }
        Scanner s=null;
        try {
            s = new Scanner(file);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(GroupMaker.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //System.out.print("Number of students in class: ");
        //s.nextInt();
        while(s.hasNextLine())
        {
            numStudents++;
            String name=s.nextLine();
            //System.out.println(name);
            students.add(new Student(name.substring(0,name.indexOf("|"))));
        }
        try {
            s = new Scanner(file);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(GroupMaker.class.getName()).log(Level.SEVERE, null, ex);
        }
        int num=0;
        while(s.hasNextLine())
        {
            
            String name=s.nextLine();
            name=name.substring(name.indexOf("|")+1);
            
            while(name.indexOf(",")!=-1)
            {
                String temp=name.substring(0,name.indexOf(","));
                name=name.substring(name.indexOf(",")+1);
                
                for(int j=0; j<students.size(); j++)
                {
                    if(students.get(j).getName().equalsIgnoreCase(temp))
                    {
                        students.get(num).addOKStudent(students.get(j));
                        j=students.size()+1;
                    }
                }
                
            }
            num++;
            //students.get(i).addOKStudent(null)
            //students.add(new Student(name.substring(0,name.indexOf("|"))));
        }
        //ta2.setText("");
        for(int i=0; i<students.size(); i++)
            {
                /*String line=students.get(i).getName()+"|";
                for(int j=0; j<students.size(); j++)
                {
                    if(i!=j)
                    {
                        line+=students.get(j).getName()+","+students.get(j).getName()+",";
                        //students.get(i).addOKStudent(students.get(j));
                    }
                }*/
                //ta2.append(students.get(i).getNumOK()+students.get(i).toPrintString()+"\n");
                
            }
        fileChooser.setVisible(false);
    }
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        load();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        // TODO add your handling code here:
        try {
            File yourFile = file;
            yourFile.delete();
            File yourNewFile = new File(file.getAbsolutePath());
            yourNewFile.createNewFile();
            
            FileWriter fw=new FileWriter(file);
            for(int i=0; i<students.size(); i++)
            {
                String line=students.get(i).getName()+"|";
                for(int j=0; j<students.size(); j++)
                {
                    if(i!=j)
                    {
                        line+=students.get(j).getName()+","+students.get(j).getName()+",";
                        //students.get(i).addOKStudent(students.get(j));
                    }
                }
                fw.write(line+"\n");
            }
            fw.close();
        } catch (IOException ex) {
            Logger.getLogger(GroupMaker.class.getName()).log(Level.SEVERE, null, ex);
        }
        //save();
        students=new ArrayList<Student>();
        numStudents=0;
        r=new Random();
        TextArea.setText("");
        load();
        
    }//GEN-LAST:event_resetButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new GroupMakerForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea TextArea;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JButton groups;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner numTimes;
    private javax.swing.JButton resetButton;
    private javax.swing.JMenu saveMenu;
    private javax.swing.JTabbedPane tabs;
    // End of variables declaration//GEN-END:variables
}
